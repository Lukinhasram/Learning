class Item():
    def __init__(self, nome, nota):
        self.nome = nome
        self.nota = float(nota)
        self.proximo = None
        self.anterior = None

class Lista():
    #inicializando a lista
    def __init__(self):
        self.inicio = None
        self.fim = None

    #inserindo no inicio
    def inserir_inicio(self, item):
        #se a lista estiver vazia
        if self.inicio is None:
            #o item que está sendo inserido, passa a ser o inicio e o fim da lista
            self.inicio = item
            self.fim = item
        #se a lista não estiver vazia
        else:
            #o item que está no inicio da lista, passa a ser o próximo do item que está sendo inserido, e o anterior do item que está no inicio da lista, passa a ser o item que está sendo inserido
            item.proximo = self.inicio
            self.inicio.anterior = item
            self.inicio = item
    
    #inserindo no fim
    def inserir_fim(self, item):
        #se a lista estiver vazia
        if self.inicio is None:
            #o item que está sendo inserido, passa a ser o inicio e o fim da lista
            self.inicio = item
            self.fim = item
        #se a lista não estiver vazia
        else:
            #o item que está no fim da lista, passa a ser o próximo do item que está sendo inserido, e o anterior do item que está no fim da lista, passa a ser o item que está sendo inserido
            item.anterior = self.fim
            self.fim.proximo = item
            self.fim = item
    
    #imprimindo a lista
    def imprimir(self):
        #ordem normal
        item_atual = self.inicio
        
        while item_atual is not None:
            #imprima o nome e a nota do item atual
            print(item_atual.nome, item_atual.nota)
            item_atual = item_atual.proximo
    
    def imprimir_inverso(self):
        #ordem reversa
        item_atual = self.fim

        while item_atual is not None:  
            #imprima o nome e a nota do item atual
            print(item_atual.nome, item_atual.nota)
            item_atual = item_atual.anterior

    #verificando se a lista está vazia
    def vazia(self):
        return self.inicio is None
    
    #buscando um item na lista
    def buscar(self, nome):
        item_atual = self.inicio

        #enquanto o item atual não for nulo
        while item_atual is not None:
            #se o nome do item atual for igual ao nome que estamos buscando, imprima o nome e a nota do item atual
            if item_atual.nome == nome:
                print("aluno(a): ", item_atual.nome, item_atual.nota)
                return
            #senão, vá para o próximo item
            else:
                item_atual = item_atual.proximo

        #se o item atual for nulo, imprima que não foi possível achar o aluno com o nome que estamos buscando
        print("não foi possível achar o aluno(a) com o nome de: ", nome)
    
    #retirando um item da lista
    def retirar(self, nome):
        item_atual = self.inicio
        #enquanto o item atual não for nulo
        while item_atual is not None:
            
            if item_atual.nome == nome:
                #se o item atual for o inicio da lista
                if item_atual == self.inicio:
                    #se o item atual for o inicio da lista, o próximo item do item atual passa a ser o inicio da lista e o anterior do item atual passa a ser nulo
                    self.inicio = item_atual.proximo
                    if self.inicio is not None:
                        self.inicio.anterior = None
                    #senão, o fim da lista passa a ser nulo
                    else:
                        self.fim = None
                
                else:
                    #senão, o anterior do item atual passa a ser o fim da lista e o próximo do item atual passa a ser nulo
                    item_atual.anterior.proximo = item_atual.proximo
                    if item_atual.proximo is not None:
                        item_atual.proximo.anterior = item_atual.anterior   
                    #senão, o fim da lista passa a ser o anterior do item atual
                    else:
                        self.fim = item_atual.anterior
                #o próximo e o anterior do item atual passam a ser nulos
                item_atual.proximo = None
                item_atual.anterior = None
                return
            #senão, vá para o próximo item
            else:
                item_atual = item_atual.proximo
        #se o item atual for nulo, imprima que não foi possível achar o aluno com o nome que estamos buscando
        print("não foi possível achar o aluno(a) com o nome de: ", nome)
    
    #esvaziando a lista
    def esvaziar(self):
        self.inicio = None
        self.fim = None



#criando as listas
l1 = Lista()

l1.inserir_inicio(Item("huguinho","12"))
l1.inserir_inicio(Item("zezinho","23"))
l1.inserir_fim(Item("luisinho","21"))
l1.inserir_inicio(Item("patricia","190"))
l1.inserir_fim(Item("patinhas","100"))
l1.inserir_inicio(Item("donald","345"))

l2 = Lista()

#imprimindo as listas
l1.imprimir()
print("-"*35)
l1.imprimir_inverso()
print("-"*35)
l2.imprimir()
print("-"*35)

#buscando os elementos
l1.buscar("zezinho")
print("-"*35)

l1.buscar("patinhas")
print('-'*35)

#retirando elementos
l1.retirar("huguinho")

l1.imprimir()
print("-"*35)

#verificando se a lista está vazia
print(l1.vazia())
print(l2.vazia())

l1.esvaziar()

print(l1.vazia())
